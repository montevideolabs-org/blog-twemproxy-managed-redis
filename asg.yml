AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  VPC:
    Description: The ID of your VPC
    Type: 'AWS::EC2::VPC::Id'
  PrivateSubnets:
    Description: The IDs of the subnets where you want to launch your instances
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnets:
    Description: The IDs of the subnets where you want to launch your instances
    Type: List<AWS::EC2::Subnet::Id>
  RedisEndpoint:
    Description: The redis endpoints for the cluster
    Type: String
  RedisPort:
    Description: The port of the Redis cluster
    Type: Number
    Default: '6379'
  RedisSecurityGroup:
    Description: The security group of the Redis cluster
    Type: AWS::EC2::SecurityGroup::Id
  ProxyPort:
    Description: The port of the Redis proxy
    Type: Number
    Default: '7779'
  CertificateArn:
    Description: The ARN of the certificate to use for the load balancer
    Type: String
  HostedZone:
    Description: The ID of the hosted zone to use for the load balancer
    Type: String
  SubdomainName:
    Description: The subdomain name to use for the load balancer
    Type: String
  TokenSecret:
    Description: Token secret
    Type: String
    Default: 'elasticache/authToken'
  ASGMinSize:
    Description: The minimum size of the ASG
    Type: Number
    Default: '1'
  ASGMaxSize:
    Description: The maximum size of the ASG
    Type: Number
    Default: '1'
  ASGDesiredCapacity:
    Description: The desired capacity of the ASG
    Type: Number
    Default: '1'
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for Redis Proxy instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ProxyPort
          ToPort: !Ref ProxyPort
          SourceSecurityGroupId: !Ref RedisSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: !Ref ProxyPort
          ToPort: !Ref ProxyPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          # This range should be limited to the IP of the load balancer afaik
  SSMInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub RedisProxyRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'
  SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref SSMInstanceRole
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        ImageId: 'ami-0bef6cc322bfff646'  # Replace with your AMI id
        InstanceType: 't2.micro'  # Replace with your instance type
        KeyName: !Ref KeyName
        SecurityGroupIds: [!GetAtt SecurityGroup.GroupId]
        IamInstanceProfile:
          Arn: !GetAtt SSMInstanceProfile.Arn
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            sudo systemctl status amazon-ssm-agent
            sudo systemctl start amazon-ssm-agent
            sudo yum install -y gcc-c++ make git
            sudo yum -y install autoconf
            sudo yum -y install automake
            sudo yum -y install libtool
            git clone https://github.com/twitter/twemproxy.git
            cd twemproxy
            autoreconf -fvi
            ./configure --enable-debug=full
            make
            make check > ../make_check.log
            sudo aws configure set region us-east-1
            sudo aws configure set output json
            sudo yum install -y jq
            PASSWORD=$(sudo aws secretsmanager get-secret-value --secret-id ${TokenSecret} --query SecretString --output text | jq -r '.token')
            echo 'production:' > config.yml
            echo '  listen: 0.0.0.0:${ProxyPort}' >> config.yml
            echo '  client_connections: 1024 # Setting a reasonable limit for client connections' >> config.yml
            echo '  hash: crc16 # Using a good general-purpose hash' >> config.yml
            echo '  distribution: ketama # Using consistent hashing for distribution' >> config.yml
            echo '  timeout: 1000 # 1 second timeout for connection and response' >> config.yml
            echo '  tcpkeepalive: true # Enable TCP keepalive to detect dead connections' >> config.yml
            echo '  auto_eject_hosts: true # Enable auto ejecting hosts on failure' >> config.yml
            echo '  server_retry_timeout: 2000 # 2 seconds before retrying a temporarily ejected server' >> config.yml
            echo '  server_failure_limit: 1 # Eject host on a single failure (be cautious, depending on use-case this may be too aggressive)' >> config.yml
            PASSWORD=$PASSWORD echo "  redis_auth: $PASSWORD # The password for your Redis cluster" >> config.yml
            echo '  redis: true # Assuming your ElastiCache is running Redis' >> config.yml
            echo '  servers: # Add the IP and port of your primary and read replica nodes here' >> config.yml
            echo '    - ${RedisEndpoint}:${RedisPort}:1' >> config.yml
            sudo src/nutcracker -c config.yml -d
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      DesiredCapacity: !Ref ASGDesiredCapacity
      TargetGroupARNs: [!Ref TargetGroup]
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: !Ref ProxyPort
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: instance
  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      Cooldown: '60'
      ScalingAdjustment: 1
  NetworkLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub RedisProxy-${AWS::StackName}
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      Type: network
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: !Ref RedisPort
      Protocol: TLS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref SubdomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
  # EC2 instances need to install packages from the internet with yum
  # so we need to create a NAT gateway in a public subnet
